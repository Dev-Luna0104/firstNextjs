para crias o app
    - npx create-next-app =========================================================================

    Se você olhar dentro da /app/uipasta, verá um arquivo chamado global.css. 
    Você pode usar esse arquivo para adicionar regras CSS a todas as rotas do seu aplicativo - como regras de redefinição de CSS, 
    estilos de todo o site para elementos HTML, como links, e muito mais.

    Quando você create-next-appinicia um novo projeto, Next.js perguntará se você deseja usar o Tailwind. Se você selecionar yes, 
    Next.js instalará automaticamente os pacotes necessários e configurará o Tailwind em seu aplicativo.

    - module.css-======================================================================================

    Os módulos CSS permitem que você defina o escopo do CSS para um componente criando automaticamente nomes de classe exclusivos, 
    para que você também não precise se preocupar com colisões de estilo.

    Dentro /app/ui, crie um novo arquivo chamado home.module.csse adicione as seguintes regras CSS:

.shape {
  height: 0;
  width: 0;
  border-bottom: 30px solid black;
  border-left: 20px solid transparent;
  border-right: 20px solid transparent;
}

    Em seguida, dentro do seu /app/page.tsxarquivo, importe os estilos e substitua os nomes das classes do tailwind que <div>você adicionou por styles.shape:

import styles from '@/app/ui/home.module.css';
 
//...
<div className="flex flex-col justify-center gap-6 rounded-lg bg-gray-50 px-6 py-10 md:w-2/5 md:px-20">
    <div className={styles.shape}></div>;
// ...

    - clsx biblioteca para alternar nomes de classes ===============================

    clsx é uma biblioteca que permite alternar facilmente os nomes das classes. Recomendamos dar uma olhada na documentação para mais detalhes, mas aqui está o uso básico:

        - clsx - https://www.npmjs.com/package/clsx
        - documentação  - https://github.com/lukeed/clsx


        =---------= capitolo 3 =========================================================================================================
        - otimizando fontes e imagens =====================================================================

        Mudança cumulativa de layouté uma métrica usada pelo Google para avaliar o desempenho e a experiência do usuário de um site. 
        Com as fontes, a mudança de layout ocorre quando o navegador inicialmente renderiza o texto em uma fonte substituta ou de sistema e, 
        em seguida, o troca por uma fonte personalizada depois de carregada. 
        Essa troca pode fazer com que o tamanho, o espaçamento ou o layout do texto sejam alterados, 
        deslocando os elementos ao seu redor.

        - Mudança acumulativa de layout - https://web.dev/cls/

        Next.js otimiza automaticamente as fontes no aplicativo quando você usa o next/font módulo. 
        Ele baixa arquivos de fontes no momento da construção e os hospeda com seus outros ativos estáticos. 
        Isso significa que quando um usuário visita seu aplicativo, 
        não há solicitações adicionais de rede para fontes que possam afetar o desempenho.

        - adicionando uma fonte primaria ============================================================================

        Na sua /app/uipasta, crie um novo arquivo chamado fonts.ts . 
        Você usará esse arquivo para manter as fontes que serão usadas em todo o seu aplicativo.

        Importe a Interfonte do next/font/googlemódulo - esta será sua fonte principal. 
        Em seguida, especifique qual subconjunto você gostaria de carregar. 
        Nesse caso, 'latin':

        - subconjunto - https://fonts.google.com/knowledge/glossary/subsetting

import { Inter } from 'next/font/google';
 
export const inter = Inter({ subsets: ['latin'] });

        Por fim, adicione a fonte ao <body>elemento em /app/layout.tsx:

import '@/app/ui/global.css';
import { inter } from '@/app/ui/fonts';
 
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`${inter.className} antialiased`}>{children}</body>
    </html>
  );
}


        Ao adicionar Interao <body>elemento, a fonte será aplicada em todo o seu aplicativo. 
        Aqui, você também está adicionando o Tailwindantialiasedclasse que suaviza a fonte. 
        Não é necessário usar esta classe, mas ela adiciona um toque legal.

        =---------= capitolo 4 =========================================================================================================
        - Criação de layout e páginas =====================================================================

        - Roteamento aninhado
        Next.js usa roteamento do sistema de arquivos onde as pastas são usadas para criar rotas aninhadas. 
        Cada pasta representa um segmento de rota que é mapeado para um segmento de URL .

        Você pode criar UIs separadas para cada rota usando arquivos layout.tsxe page.tsx.

        page.tsxé um arquivo Next.js especial que exporta um componente React e é necessário para que a rota seja acessível. 
        Na sua aplicação, você já possui um arquivo de paginação: /app/page.tsx - esta é a página inicial associada à rota /.

        Para criar uma rota aninhada, 
        você pode aninhar pastas umas dentro das outras e adicionar page.tsx arquivos dentro delas.

        - Criando a página do painel
        Crie uma nova pasta chamada dashboardinside /app. Em seguida, 
        crie um novo page.tsx arquivo dentro da dashboardpasta com o seguinte conteúdo:

export default function Page() {
  return <p>Dashboard Page</p>;
}

        É assim que você pode criar páginas diferentes em Next.js: crie um novo segmento de rota usando uma pasta e adicione um pagearquivo dentro dele.

        Por ter um nome especial para pagearquivos, Next.js permite colocar componentes de UI, 
        arquivos de teste e outros códigos relacionados com suas rotas. 
        Somente o conteúdo dentro do pagearquivo estará acessível publicamente. 
        Por exemplo, as pastas /uie /lib estão localizadas dentro da /app pasta junto com suas rotas.


        =---------= capitolo 5 =========================================================================================================
        - Navegando entre páginas =====================================================================

        - Por que otimizar a navegação ?

        Para vincular páginas, você tradicionalmente usaria o <a>elemento HTML. 
        No momento, os links da barra lateral usam <a>elementos, 
        mas observe o que acontece quando você navega entre as páginas inicial, 
        de faturas e de clientes em seu navegador.

        Há uma atualização completa da página em cada navegação de página!

        - O <Link> componente
        No Next.js, você pode usar o <Link /> componente para vincular as páginas do seu aplicativo. 
        <Link> permite que você faça navegação no lado do cliente com JavaScript.

        Para usar o <Link />componente, 
        abra /app/ui/dashboard/nav-links.tsx e importe o Link componente de next/link. 
        Em seguida, substitua a <a> tag por <Link>

        - Divisão automática de código e pré-busca
        Para melhorar a experiência de navegação, o código Next.js divide automaticamente seu aplicativo por segmentos de rota. 
        Isso é diferente de um React SPA tradicional, 
        onde o navegador carrega todo o código do seu aplicativo no carregamento inicial.

        Dividir o código por rotas significa que as páginas ficam isoladas. 
        Se uma determinada página gerar um erro, o restante do aplicativo ainda funcionará.

        Além disso, na produção, sempre que <Link>componentes aparecem na janela de visualização do navegador, 
        o Next.js pré-busca automaticamente o código da rota vinculada em segundo plano. 
        No momento em que o usuário clicar no link, o código da página de destino já estará carregado em segundo plano, 
        e é isso que torna a transição da página quase instantânea!
        - Saiba mais sobre como funciona a navegação. - https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#how-routing-and-navigation-works

        - padrão : mostrando links ativos

        Um padrão de UI comum é mostrar um link ativo para indicar ao usuário em qual página ele está atualmente. 
        Para fazer isso, você precisa obter o caminho atual do usuário na URL. 
        Next.js fornece um gancho chamado usePathname() que você pode usar para verificar o caminho e implementar esse padrão.
        - usePathname() - https://nextjs.org/docs/app/api-reference/functions/use-pathname

        DesdeusePathname()é um gancho, você precisará transformá-lo nav-links.tsx em um componente cliente. 
        Adicione a diretiva do React "use client"ao topo do arquivo e importe usePathname() de next/navigation:

        =---------= capitolo 6 =========================================================================================================
        - Configurando seu banco de dados =====================================================================


        Antes de continuar trabalhando em seu painel, você precisará de alguns dados. 
        Neste capítulo, você configurará um banco de dados PostgreSQL usando @vercel/postgres. 
        Se você já conhece o PostgreSQL e prefere usar seu próprio provedor, pode pular este capítulo e configurá-lo por conta própria. 
        Caso contrário, vamos continuar!

        - Conecte e implante seu projeto no Vercel

        - Crie um banco de dados Postgres
        Em seguida, para configurar um banco de dados, 
        clique em Continuar para o painel e selecione a guia Armazenamento no painel do projeto. 
        Selecione Connect Store → Criar novo → Postgres → Continuar .

        Uma vez conectado, navegue até a .env.local guia, 
        clique em Mostrar segredo e Copiar trecho . 
        Certifique-se de revelar os segredos antes de copiá-los.

        Navegue até o seu editor de código e renomeie o .env.example arquivo para .env . 
        Cole o conteúdo copiado do Vercel.

        Importante: Vá para o seu .gitignore arquivo e certifique-se de que .envele esteja nos arquivos ignorados 
        para evitar que os segredos do seu banco de dados sejam expostos quando você enviar para o GitHub.

        Por fim, execute npm i @vercel/postgres em seu terminal para instalar o Vercel Postgres SDK.

        - Semeie seu banco de dados
        Agora que seu banco de dados foi criado, vamos semeá-lo com alguns dados iniciais. 
        Isso permitirá que você tenha alguns dados para trabalhar enquanto cria o painel.

        Na /scripts pasta do seu projeto existe um arquivo chamado seed.js . 
        Este script contém as instruções para criar e propagar as tabelas invoices, customers, user, revenue .

        Não se preocupe se você não entender tudo o que o código está fazendo, 
        mas para lhe dar uma visão geral, 
        o script usa SQL para criar as tabelas e os dados do placeholder-data.js 
        arquivo para preenchê-las depois de criadas.